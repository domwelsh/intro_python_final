##for mode one, where we get random 7 letters and then it generates the biggest word possible
##dont forget in terminal: pip install nltk

import random
import nltk

nltk.download('words')
from nltk.corpus import words

def main():
    print("Welcome to English Scrabble Practice!")
    user_choice = None

    while True:
        if user_choice == None:
            pass
        elif user_choice == '1':
            mode_1()
        elif user_choice == '2':
            print("Thanks for playing! Goodbye.")
            break
        else:
            print("Invalid choice. Please try again.")
        print("Select a mode:")
        print("1. Practice Mode")
        print("2. Quit")
        user_choice = input("Enter the mode number: ")


def mode_1():
    print("Entering Practice Mode 1...")
    while True:
        ready_input = input("Press Enter when ready to generate letters. Enter 'q' to quit: ")

        if ready_input.lower() == 'q':
            print("Exiting Practice Mode 1...")
            break

        letters = no_points_generate_letters()
        print("Generated Letters:", ' '.join(letters))
        
        input("Press Enter to reveal the longest words.")
        
        words = longest_words(letters)
        if isinstance(words, str):
            print(words)
        elif len(words) == 1:
            print("Longest Word:", words[0])
        else:
            print("Longest Words:")
            for w in words:
                print(w)


# should we have space also? i think it will this complicate the process
# Dom - Space as in ' '? We should not have that, only want to make entire words
def no_points_generate_letters(amount=7):
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    return random.sample(alphabet, amount)

def longest_words(letters):
    english_word_list = set(words.words())
    
    def is_valid(word, available_letters):
        for letter in word:
            if (word.count(letter) > available_letters.count(letter)) or len(word) == 1:
                return False
        return True

    valid_words = [word for word in english_word_list if is_valid(word, letters)]

    if valid_words:
        max_len = len(max(valid_words, key=len))
        max_words = [word for word in valid_words if len(word) == max_len]
        return max_words
    else:
        return "No valid word found."

if __name__ == "__main__":
    main()
